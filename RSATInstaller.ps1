#requires -Version 3

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.159
     Generated on:       11/4/2019 11:40 AM
     Generated by:       Jordan Colton
     Organization:       InterMountain ESD
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2019
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-RSATInstaller_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formRSATInstaller = New-Object 'System.Windows.Forms.Form'
	$buttonRemoveAll = New-Object 'System.Windows.Forms.Button'
	$buttonSelectAll = New-Object 'System.Windows.Forms.Button'
	$textbox_Status = New-Object 'System.Windows.Forms.TextBox'
	$buttonInstall = New-Object 'System.Windows.Forms.Button'
	$labelRSATInstaller = New-Object 'System.Windows.Forms.Label'
	$checkedlistboxRSAT = New-Object 'System.Windows.Forms.CheckedListBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formRSATInstaller_Load={
		$buttonInstall.Enabled = $false
		$featuresToInstall = @()
		$listBoxItems = @()
		$listBoxItems += "Active Directory DS and LDS Tools"
		$listBoxItems += "BitLocker Drive Encryption Administration Utilities"
		$listBoxItems += "Active Directory Certificate Services Tools"
		$listBoxItems += "DHCP Server Tools"
		$listBoxItems += "DNS Server Tools"
		$listBoxItems += "Failover Clustering Tools"
		$listBoxItems += "File Services Tools"
		$listBoxItems += "Group Policy Management Tools"
		$listBoxItems += "IP Address Management (IPAM) Client"
		$listBoxItems += "Data Center Bridging LLDP Tools"
		$listBoxItems += "Network Controller Management Tools"
		$listBoxItems += "Network Load Balancing Tools"
		$listBoxItems += "Remote Access Management Tools"
		$listBoxItems += "Remote Desktop Services Tools"
		$listBoxItems += "Server Manager"
		$listBoxItems += "Shielded VM Tools"
		$listBoxItems += "Storage Migration Service Management Tools"
		$listBoxItems += "Storage Replica Module for Windows PowerShell"
		$listBoxItems += "Systems Insights Module for Windows PowerShell"
		$listBoxItems += "Volume Activation Tools"
		$listBoxItems += "Windows Server Update Services Tools"
		
		Update-ListBox $checkedlistboxRSAT -Items $listBoxItems -Append
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$buttonInstall_Click={
		if ($checkedlistboxRSAT.CheckedItems.Count -gt 0)
		{
			foreach ($item in $checkedlistboxRSAT.CheckedItems)
			{
				if ($item -eq "Active Directory DS and LDS Tools")
				{
					$featuresToInstall += "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
				}
				if ($item -eq "BitLocker Drive Encryption Administration Utilities")
				{
					$featuresToInstall += "Rsat.BitLocker.Recovery.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Active Directory Certificate Services Tools")
				{
					$featuresToInstall += "Rsat.CertificateServices.Tools~~~~0.0.1.0"
				}
				if ($item -eq "DHCP Server Tools")
				{
					$featuresToInstall += "Rsat.DHCP.Tools~~~~0.0.1.0"
				}
				if ($item -eq "DNS Server Tools")
				{
					$featuresToInstall += "Rsat.Dns.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Failover Clustering Tools")
				{
					$featuresToInstall += "Rsat.FailoverCluster.Management.Tools~~~~0.0.1.0"
				}
				if ($item -eq "File Services Tools")
				{
					$featuresToInstall += "Rsat.FileServices.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Group Policy Management Tools")
				{
					$featuresToInstall += "Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0"
				}
				if ($item -eq "IP Address Management (IPAM) Client")
				{
					$featuresToInstall += "Rsat.IPAM.Client.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Data Center Bridging LLDP Tools")
				{
					$featuresToInstall += "Rsat.LLDP.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Network Controller Management Tools")
				{
					$featuresToInstall += "Rsat.NetworkController.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Network Load Balancing Tools")
				{
					$featuresToInstall += "Rsat.NetworkLoadBalancing.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Remote Access Management Tools")
				{
					$featuresToInstall += "Rsat.RemoteAccess.Management.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Remote Desktop Services Tools")
				{
					$featuresToInstall += "Rsat.RemoteDesktop.Services.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Server Manager")
				{
					$featuresToInstall += "Rsat.ServerManager.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Shielded VM Tools")
				{
					$featuresToInstall += "Rsat.Shielded.VM.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Storage Migration Service Management Tools")
				{
					$featuresToInstall += "Rsat.StorageMigrationService.Management.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Storage Replica Module for Windows PowerShell")
				{
					$featuresToInstall += "Rsat.StorageReplica.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Systems Insights Module for Windows PowerShell")
				{
					$featuresToInstall += "Rsat.SystemInsights.Management.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Volume Activation Tools")
				{
					$featuresToInstall += "Rsat.VolumeActivation.Tools~~~~0.0.1.0"
				}
				if ($item -eq "Windows Server Update Services Tools")
				{
					$featuresToInstall += "Rsat.WSUS.Tools~~~~0.0.1.0"
				}
			}
			$textbox_Status.Text = "Installing selected RSAT items."
			foreach ($item in $featuresToInstall)
			{
				$textbox_Status.Text += "`r`nInstalling $item"
				start-process -FilePath "C:\Windows\System32\Dism.exe" -ArgumentList "/Online /Add-Capability /CapabilityName:$item" -Wait
			}
			$textbox_Status.Text += "`r`nFinished! Good luck out there."
		}
	}
	
	$checkedlistboxRSAT_SelectedIndexChanged = {
		
		if ($checkedlistboxRSAT.CheckedItems.Count -gt 0)
		{
			$buttonInstall.Enabled = $true
		}
		if ($checkedlistboxRSAT.CheckedItems.Count -eq 0)
		{
			$buttonInstall.Enabled = $false
		}
	}
	
	$buttonSelectAll_Click = {
		$i = 0
		while ($i -lt $checkedlistboxRSAT.Items.Count){
			$checkedlistboxRSAT.SetItemChecked($i, $true)
			$i++
		}
		$buttonInstall.Enabled = $true
	}
	
	$buttonRemoveAll_Click={
		$i = 0
		while ($i -lt $checkedlistboxRSAT.Items.Count)
		{
			$checkedlistboxRSAT.SetItemChecked($i, $false)
			$i++
		}
		$buttonInstall.Enabled = $false
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formRSATInstaller.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRemoveAll.remove_Click($buttonRemoveAll_Click)
			$buttonSelectAll.remove_Click($buttonSelectAll_Click)
			$buttonInstall.remove_Click($buttonInstall_Click)
			$checkedlistboxRSAT.remove_SelectedIndexChanged($checkedlistboxRSAT_SelectedIndexChanged)
			$formRSATInstaller.remove_Load($formRSATInstaller_Load)
			$formRSATInstaller.remove_Load($Form_StateCorrection_Load)
			$formRSATInstaller.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formRSATInstaller.SuspendLayout()
	#
	# formRSATInstaller
	#
	$formRSATInstaller.Controls.Add($buttonRemoveAll)
	$formRSATInstaller.Controls.Add($buttonSelectAll)
	$formRSATInstaller.Controls.Add($textbox_Status)
	$formRSATInstaller.Controls.Add($buttonInstall)
	$formRSATInstaller.Controls.Add($labelRSATInstaller)
	$formRSATInstaller.Controls.Add($checkedlistboxRSAT)
	$formRSATInstaller.Controls.Add($buttonOK)
	$formRSATInstaller.AcceptButton = $buttonOK
	$formRSATInstaller.AutoScaleDimensions = '6, 13'
	$formRSATInstaller.AutoScaleMode = 'Font'
	$formRSATInstaller.ClientSize = '412, 425'
	$formRSATInstaller.FormBorderStyle = 'FixedDialog'
	$formRSATInstaller.MaximizeBox = $False
	$formRSATInstaller.MinimizeBox = $False
	$formRSATInstaller.Name = 'formRSATInstaller'
	$formRSATInstaller.StartPosition = 'CenterScreen'
	$formRSATInstaller.Text = 'RSAT Installer'
	$formRSATInstaller.add_Load($formRSATInstaller_Load)
	#
	# buttonRemoveAll
	#
	$buttonRemoveAll.Location = '110, 390'
	$buttonRemoveAll.Name = 'buttonRemoveAll'
	$buttonRemoveAll.Size = '75, 23'
	$buttonRemoveAll.TabIndex = 6
	$buttonRemoveAll.Text = 'Remove All'
	$buttonRemoveAll.UseCompatibleTextRendering = $True
	$buttonRemoveAll.UseVisualStyleBackColor = $True
	$buttonRemoveAll.add_Click($buttonRemoveAll_Click)
	#
	# buttonSelectAll
	#
	$buttonSelectAll.Location = '28, 390'
	$buttonSelectAll.Name = 'buttonSelectAll'
	$buttonSelectAll.Size = '75, 23'
	$buttonSelectAll.TabIndex = 5
	$buttonSelectAll.Text = 'Select All'
	$buttonSelectAll.UseCompatibleTextRendering = $True
	$buttonSelectAll.UseVisualStyleBackColor = $True
	$buttonSelectAll.add_Click($buttonSelectAll_Click)
	#
	# textbox_Status
	#
	$textbox_Status.Location = '28, 323'
	$textbox_Status.Multiline = $True
	$textbox_Status.Name = 'textbox_Status'
	$textbox_Status.ReadOnly = $True
	$textbox_Status.ScrollBars = 'Vertical'
	$textbox_Status.Size = '354, 61'
	$textbox_Status.TabIndex = 4
	#
	# buttonInstall
	#
	$buttonInstall.Location = '226, 390'
	$buttonInstall.Name = 'buttonInstall'
	$buttonInstall.Size = '75, 23'
	$buttonInstall.TabIndex = 3
	$buttonInstall.Text = 'Install'
	$buttonInstall.UseCompatibleTextRendering = $True
	$buttonInstall.UseVisualStyleBackColor = $True
	$buttonInstall.add_Click($buttonInstall_Click)
	#
	# labelRSATInstaller
	#
	$labelRSATInstaller.AutoSize = $True
	$labelRSATInstaller.Font = 'Lucida Console, 14pt, style=Bold'
	$labelRSATInstaller.Location = '115, 9'
	$labelRSATInstaller.Name = 'labelRSATInstaller'
	$labelRSATInstaller.Size = '174, 24'
	$labelRSATInstaller.TabIndex = 2
	$labelRSATInstaller.Text = 'RSAT Installer'
	$labelRSATInstaller.UseCompatibleTextRendering = $True
	#
	# checkedlistboxRSAT
	#
	$checkedlistboxRSAT.CheckOnClick = $True
	$checkedlistboxRSAT.FormattingEnabled = $True
	$checkedlistboxRSAT.HorizontalScrollbar = $True
	$checkedlistboxRSAT.Location = '28, 57'
	$checkedlistboxRSAT.Name = 'checkedlistboxRSAT'
	$checkedlistboxRSAT.Size = '354, 259'
	$checkedlistboxRSAT.TabIndex = 1
	$checkedlistboxRSAT.UseCompatibleTextRendering = $True
	$checkedlistboxRSAT.add_SelectedIndexChanged($checkedlistboxRSAT_SelectedIndexChanged)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '307, 390'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$formRSATInstaller.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formRSATInstaller.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formRSATInstaller.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formRSATInstaller.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formRSATInstaller.ShowDialog()

} #End Function

#Call the form
Show-RSATInstaller_psf | Out-Null
