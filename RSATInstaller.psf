
$formRSATInstaller_Load={
	$buttonInstall.Enabled = $false
	$featuresToInstall = @()
	$listBoxItems = @()
	$listBoxItems += "Active Directory DS and LDS Tools"
	$listBoxItems += "BitLocker Drive Encryption Administration Utilities"
	$listBoxItems += "Active Directory Certificate Services Tools"
	$listBoxItems += "DHCP Server Tools"
	$listBoxItems += "DNS Server Tools"
	$listBoxItems += "Failover Clustering Tools"
	$listBoxItems += "File Services Tools"
	$listBoxItems += "Group Policy Management Tools"
	$listBoxItems += "IP Address Management (IPAM) Client"
	$listBoxItems += "Data Center Bridging LLDP Tools"
	$listBoxItems += "Network Controller Management Tools"
	$listBoxItems += "Network Load Balancing Tools"
	$listBoxItems += "Remote Access Management Tools"
	$listBoxItems += "Remote Desktop Services Tools"
	$listBoxItems += "Server Manager"
	$listBoxItems += "Shielded VM Tools"
	$listBoxItems += "Storage Migration Service Management Tools"
	$listBoxItems += "Storage Replica Module for Windows PowerShell"
	$listBoxItems += "Systems Insights Module for Windows PowerShell"
	$listBoxItems += "Volume Activation Tools"
	$listBoxItems += "Windows Server Update Services Tools"
	
	Update-ListBox $checkedlistboxRSAT -Items $listBoxItems -Append
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion

$buttonInstall_Click={
	if ($checkedlistboxRSAT.CheckedItems.Count -gt 0)
	{
		foreach ($item in $checkedlistboxRSAT.CheckedItems)
		{
			if ($item -eq "Active Directory DS and LDS Tools")
			{
				$featuresToInstall += "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
			}
			if ($item -eq "BitLocker Drive Encryption Administration Utilities")
			{
				$featuresToInstall += "Rsat.BitLocker.Recovery.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Active Directory Certificate Services Tools")
			{
				$featuresToInstall += "Rsat.CertificateServices.Tools~~~~0.0.1.0"
			}
			if ($item -eq "DHCP Server Tools")
			{
				$featuresToInstall += "Rsat.DHCP.Tools~~~~0.0.1.0"
			}
			if ($item -eq "DNS Server Tools")
			{
				$featuresToInstall += "Rsat.Dns.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Failover Clustering Tools")
			{
				$featuresToInstall += "Rsat.FailoverCluster.Management.Tools~~~~0.0.1.0"
			}
			if ($item -eq "File Services Tools")
			{
				$featuresToInstall += "Rsat.FileServices.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Group Policy Management Tools")
			{
				$featuresToInstall += "Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0"
			}
			if ($item -eq "IP Address Management (IPAM) Client")
			{
				$featuresToInstall += "Rsat.IPAM.Client.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Data Center Bridging LLDP Tools")
			{
				$featuresToInstall += "Rsat.LLDP.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Network Controller Management Tools")
			{
				$featuresToInstall += "Rsat.NetworkController.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Network Load Balancing Tools")
			{
				$featuresToInstall += "Rsat.NetworkLoadBalancing.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Remote Access Management Tools")
			{
				$featuresToInstall += "Rsat.RemoteAccess.Management.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Remote Desktop Services Tools")
			{
				$featuresToInstall += "Rsat.RemoteDesktop.Services.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Server Manager")
			{
				$featuresToInstall += "Rsat.ServerManager.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Shielded VM Tools")
			{
				$featuresToInstall += "Rsat.Shielded.VM.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Storage Migration Service Management Tools")
			{
				$featuresToInstall += "Rsat.StorageMigrationService.Management.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Storage Replica Module for Windows PowerShell")
			{
				$featuresToInstall += "Rsat.StorageReplica.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Systems Insights Module for Windows PowerShell")
			{
				$featuresToInstall += "Rsat.SystemInsights.Management.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Volume Activation Tools")
			{
				$featuresToInstall += "Rsat.VolumeActivation.Tools~~~~0.0.1.0"
			}
			if ($item -eq "Windows Server Update Services Tools")
			{
				$featuresToInstall += "Rsat.WSUS.Tools~~~~0.0.1.0"
			}
		}
		$textbox_Status.Text = "Installing selected RSAT items."
		foreach ($item in $featuresToInstall)
		{
			$textbox_Status.Text += "`r`nInstalling $item"
			start-process -FilePath "C:\Windows\System32\Dism.exe" -ArgumentList "/Online /Add-Capability /CapabilityName:$item" -Wait
		}
		$textbox_Status.Text += "`r`nFinished! Good luck out there."
	}
}

$checkedlistboxRSAT_SelectedIndexChanged = {
	
	if ($checkedlistboxRSAT.CheckedItems.Count -gt 0)
	{
		$buttonInstall.Enabled = $true
	}
	if ($checkedlistboxRSAT.CheckedItems.Count -eq 0)
	{
		$buttonInstall.Enabled = $false
	}
}

$buttonSelectAll_Click = {
	$i = 0
	while ($i -lt $checkedlistboxRSAT.Items.Count){
		$checkedlistboxRSAT.SetItemChecked($i, $true)
		$i++
	}
	$buttonInstall.Enabled = $true
}

$buttonRemoveAll_Click={
	$i = 0
	while ($i -lt $checkedlistboxRSAT.Items.Count)
	{
		$checkedlistboxRSAT.SetItemChecked($i, $false)
		$i++
	}
	$buttonInstall.Enabled = $false
}
